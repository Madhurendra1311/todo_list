[{"/home/madhu/Documents/todo_list/src/index.js":"1","/home/madhu/Documents/todo_list/src/App.js":"2","/home/madhu/Documents/todo_list/src/reportWebVitals.js":"3","/home/madhu/Documents/todo_list/src/Component/Login.jsx":"4","/home/madhu/Documents/todo_list/src/Component/TodoList.jsx":"5","/home/madhu/Documents/todo_list/src/Component/ProgressChart.js":"6"},{"size":500,"mtime":1606932170623,"results":"7","hashOfConfig":"8"},{"size":481,"mtime":1607093239622,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1606932170647,"results":"10","hashOfConfig":"8"},{"size":3748,"mtime":1607106106487,"results":"11","hashOfConfig":"8"},{"size":13787,"mtime":1607105308812,"results":"12","hashOfConfig":"8"},{"size":1343,"mtime":1607067808609,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1p44tev",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"30"},"/home/madhu/Documents/todo_list/src/index.js",[],["31","32"],"/home/madhu/Documents/todo_list/src/App.js",[],"/home/madhu/Documents/todo_list/src/reportWebVitals.js",[],"/home/madhu/Documents/todo_list/src/Component/Login.jsx",["33"],"import React, { useState } from 'react';\nimport axios from \"axios\"\nimport { useHistory } from \"react-router-dom\";\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%',\n        marginTop: theme.spacing(1),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n}));\n\nexport default function SignIn() {\n    const classes = useStyles();\n    const history = useHistory()\n    const [email, setEmail] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n\n    const handleEmailChange = (e) => {\n        setEmail(e.target.value)\n    }\n    const handlePasswordChange = (e) => {\n        setPassword(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        let payload = {\n            email: email,\n            password: password\n        }\n        axios.\n            post(\"https://reqres.in/api/login\", payload)\n            .then(res => {\n                if (res.data.token) {\n                    window.localStorage.setItem(\"token\", res.data.token)\n                    // alert(\"login successful\")\n                    history.push('/TodoList')\n                }\n                else {\n                    alert(\"Invalid Credentials pls try Again !!!\")\n                }\n            })\n    }\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline />\n            <div className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Sign in\n                </Typography>\n                <form className={classes.form} noValidate>\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        id=\"email\"\n                        label=\"Email Address\"\n                        name=\"email\"\n                        autoComplete=\"email\"\n                        autoFocus\n                        onChange={handleEmailChange}\n                    />\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        name=\"password\"\n                        label=\"Password\"\n                        type=\"password\"\n                        id=\"password\"\n                        autoComplete=\"current-password\"\n                        onChange={handlePasswordChange}\n                    />\n                    <Button\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.submit}\n                        onClick={handleSubmit}\n                    >\n                        Sign In\n                    </Button>\n                </form>\n            </div>\n        </Container>\n    );\n}","/home/madhu/Documents/todo_list/src/Component/TodoList.jsx",["34","35"],"import React, { useState, useEffect } from 'react'\nimport { useHistory } from \"react-router-dom\";\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport styles from \"./app.module.css\";\nimport ProgressChart from \"./ProgressChart\"\nimport { Container, Row, Col, Nav, Navbar, FormControl, InputGroup, Button } from \"react-bootstrap\"\n\n\nexport default function Todolist() {\n    const history = useHistory()\n    const [taskList, setTaskList] = useState([])\n    const [taskName, setTaskName] = useState('')\n    const [subTaskName, setSubTaskName] = useState('')\n    const [activeTaskIdEdit, setActiveTaskIdEdit] = useState(null)\n    const [activeTaskIdSubtask, setActiveTaskIdSubtask] = useState(null)\n    const [activeSubtaskIdEdit, setActiveSubtaskIdEdit] = useState(null)\n    const [todoCount, setTodoCount] = useState(0)\n    const [completedCount, setCompletedCount] = useState(0)\n\n    useEffect(() => {\n        if (!window.localStorage.getItem(\"token\")) {\n            history.push(\"/\")\n        }\n    }, [])\n\n    const handleTaskName = (e) => {\n        setTaskName(e.target.value)\n    }\n\n    const handleAddTaskSubmit = () => {\n        if (taskName.length > 0) {\n            let taskObj = {}\n            taskObj['id'] = new Date().getTime()\n            taskObj['name'] = taskName\n            taskObj['subtask'] = []\n            setTaskList([...taskList, taskObj])\n            setTaskName('')\n        }\n    }\n\n    const handleEditTask = (id) => {\n        let filteredName = taskList.filter(item => item.id === id)[0].name\n        setActiveTaskIdEdit(id)\n        setTaskName(filteredName)\n    }\n\n    const handleEditTaskSubmit = () => {\n        let task = taskList.find(item => item.id === activeTaskIdEdit)\n        task.name = taskName\n        setTaskName('')\n        setActiveTaskIdEdit(null)\n    }\n\n    const handleDeleteTask = (id) => {\n        let filteredTask = taskList.filter(item => item.id !== id)\n        let deletedTask = taskList.filter(item => item.id === id)[0].subtask\n        for (let i = 0; i < deletedTask.length; i++) {\n            if (deletedTask[i].isCompleted) {\n                setCompletedCount((completedCount) => completedCount - 1)\n            }\n            else {\n                setTodoCount((todoCount) => todoCount - 1)\n            }\n        }\n        setTaskList(filteredTask)\n    }\n\n    const handleSubTaskFlag = (id) => {\n        setActiveTaskIdSubtask(id)\n    }\n\n    const handleSubtaskName = (e) => {\n        setSubTaskName(e.target.value)\n    }\n\n    const handleAddSubtask = (e) => {\n        e.preventDefault()\n        let task = taskList.find(item => item.id === activeTaskIdSubtask)\n        let subTaskObj = {}\n        subTaskObj['id'] = new Date().getTime()\n        subTaskObj['name'] = subTaskName\n        subTaskObj['isCompleted'] = false\n        task.subtask = [...task.subtask, subTaskObj]\n        setTodoCount((todoCount) => todoCount + 1)\n        setSubTaskName('')\n    }\n\n    const handleSubtaskEdit = (subtaskId, taskId) => {\n        let subtask = taskList.filter(itemTask => itemTask.id === taskId)[0]?.subtask.filter(itemSubtask => itemSubtask.id === subtaskId)[0]\n        console.log(subtask);\n        setSubTaskName(subtask.name)\n        setActiveSubtaskIdEdit(subtaskId)\n        setActiveTaskIdSubtask(taskId)\n    }\n\n    const handleEditSubtask = (e) => {\n        e.preventDefault()\n        let filterdSubtask = taskList.find(itemTask => itemTask.id === activeTaskIdSubtask)?.subtask.find(itemSubtask => itemSubtask.id === activeSubtaskIdEdit)\n        console.log(filterdSubtask, activeTaskIdSubtask, activeSubtaskIdEdit);\n        filterdSubtask.name = subTaskName\n        setSubTaskName('')\n        setActiveSubtaskIdEdit(null)\n        setActiveTaskIdSubtask(null)\n    }\n\n    const handleSubtaskDelete = (subtaskId, taskId) => {\n        let tempTaskList = [...taskList]\n        let filterdTaskIndex = tempTaskList.findIndex(itemTask => itemTask.id === taskId)\n        let filterdTask = tempTaskList.filter(itemTask => itemTask.id === taskId)[0]\n        let filteredSubtask = filterdTask.subtask?.filter(itemSubtask => itemSubtask.id !== subtaskId)\n        tempTaskList.splice(filterdTaskIndex, 1)\n        filterdTask.subtask = filteredSubtask\n        tempTaskList.splice(filterdTaskIndex, 0, filterdTask)\n        if (todoCount > 0) {\n            setTodoCount((todoCount) => todoCount - 1)\n        }\n        setTaskList(tempTaskList)\n    }\n\n    const handleSubtaskMark = (subtaskId, taskId) => {\n        let tempTaskList = [...taskList]\n        let filterdTask = tempTaskList.find(itemTask => itemTask.id === taskId)\n        let filterdSubtask = filterdTask.subtask?.find(itemSubtask => itemSubtask.id === subtaskId)\n        filterdSubtask.isCompleted = !filterdSubtask.isCompleted\n        if (filterdSubtask.isCompleted) {\n            setTodoCount((todoCount) => todoCount - 1)\n            setCompletedCount((completedCount) => completedCount + 1)\n        }\n        else {\n            setTodoCount((todoCount) => todoCount + 1)\n            setCompletedCount((completedCount) => completedCount - 1)\n        }\n        setTaskList(tempTaskList)\n    }\n    const handleRemoveToken = () => {\n        if (!window.localStorage.removeItem(\"token\")) {\n            history.push(\"/\")\n        }\n    }\n\n    let chartDatasets = [\n        {\n            data: [\n                todoCount,\n                completedCount\n            ],\n            backgroundColor: [\n                '#FDBF00',\n                '#FA4570',\n            ]\n        }\n    ]\n\n    console.log(todoCount, completedCount);\n\n    return (\n        <>\n            <Navbar bg=\"dark\" variant=\"dark\">\n                <Navbar.Brand href=\"#home\">Todos</Navbar.Brand>\n                <Nav className=\"ml-auto\">\n                    <Nav.Link onClick={handleRemoveToken} >Logout</Nav.Link>\n                </Nav>\n            </Navbar>\n            <Container fluid>\n                <Row>\n                    <Col style={{ margin: \"auto\" }} lg={6}>\n                        <div >\n                            <div >\n                                <div>\n                                    <InputGroup className=\"mb-3\">\n                                        <FormControl\n                                            type=\"text\" onChange={handleTaskName} value={taskName} placeholder=\"Add todo....\"\n                                            aria-label=\"Recipient's username\"\n                                            aria-describedby=\"basic-addon2\"\n                                        />\n                                        <InputGroup.Append>\n                                            {\n                                                activeTaskIdEdit === null ?\n                                                    <Button variant=\"outline-secondary\" onClick={handleAddTaskSubmit}>Add Todo</Button>\n                                                    :\n                                                    <Button variant=\"outline-secondary\" onClick={handleEditTaskSubmit}>Edit Todo</Button>\n                                            }\n                                        </InputGroup.Append>\n                                    </InputGroup>\n                                </div>\n                                {\n                                    taskList?.map(task => {\n                                        return (\n                                            <div key={task.id}>\n                                                <div style={{ background: \"#C0C0C0\" }}>\n                                                    <p >{task.name} <EditIcon style={{ marginLeft: \"400px\" }} onClick={() => handleEditTask(task.id)} />\n                                                        <DeleteIcon onClick={() => handleDeleteTask(task.id)} />\n                                                        <button className={styles.button} onClick={() => handleSubTaskFlag(task.id)}>Add Sub Task</button>\n                                                    </p>\n                                                </div>\n\n                                                <div><br />\n                                                    {\n                                                        activeTaskIdSubtask === task.id ?\n                                                            <div >\n                                                                {\n                                                                    activeSubtaskIdEdit === null ?\n                                                                        <form onSubmit={handleAddSubtask}>\n                                                                            <input type=\"text\" onChange={handleSubtaskName} value={subTaskName} placeholder=\"Add subtask....\" style={{ width: \"620px\" }} />\n                                                                        </form>\n                                                                        :\n                                                                        <form onSubmit={handleEditSubtask}>\n                                                                            <input type=\"text\" onChange={handleSubtaskName} value={subTaskName} placeholder=\"Add subtask....\" style={{ width: \"620px\" }} />\n                                                                        </form>\n                                                                }\n                                                            </div>\n                                                            :\n                                                            null\n                                                    }\n                                                    <div ><br />\n                                                        {\n                                                            task.subtask?.map(_subtask => {\n                                                                if (_subtask.isCompleted) {\n                                                                    return (\n                                                                        <div key={_subtask.id}>\n                                                                            <div style={{ background: \"grey\", color: \"white\" }}>\n                                                                                <p>{_subtask.name}</p>\n                                                                            </div>\n                                                                            <div>\n                                                                                <button className={styles.button1} onClick={() => handleSubtaskEdit(_subtask.id, task.id)}>Edit</button>\n                                                                                <button className={styles.button3} onClick={() => handleSubtaskDelete(_subtask.id, task.id)}>Delete</button>\n                                                                                <button className={styles.button2} onClick={() => handleSubtaskMark(_subtask.id, task.id)}>Mark as Incomplete</button>\n                                                                            </div>\n                                                                        </div>\n                                                                    )\n                                                                }\n                                                                else {\n                                                                    return (\n                                                                        <div key={_subtask.id}>\n                                                                            <div style={{ background: \"grey\", color: \"white\" }}>\n                                                                                <p>{_subtask.name}</p>\n                                                                            </div>\n                                                                            <div>\n                                                                                <button className={styles.button1} onClick={() => handleSubtaskEdit(_subtask.id, task.id)}>Edit</button>\n                                                                                <button className={styles.button3} onClick={() => handleSubtaskDelete(_subtask.id, task.id)}>Delete</button>\n                                                                                <button className={styles.button2} onClick={() => handleSubtaskMark(_subtask.id, task.id)}>Mark as Complete</button>\n                                                                            </div>\n                                                                        </div>\n                                                                    )\n                                                                }\n                                                            })\n                                                        }\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        )\n                                    })\n                                }\n\n\n                            </div>\n                        </div>\n                    </Col>\n                    <Col lg={6}>\n                        {\n                            <div className=\"\">\n                                <ProgressChart todo={todoCount} completed={completedCount} />\n                            </div>\n                        }\n                    </Col>\n                </Row>\n            </Container>\n        </>\n    )\n}","/home/madhu/Documents/todo_list/src/Component/ProgressChart.js",["36"],"import React, { Component } from 'react'\nimport { Pie } from 'react-chartjs-2';\n\nexport default class ProgressChart extends Component {\n    constructor(props) {\n        super(props)\n    }\n    \n    render() {\n        console.log(this.props);\n     return ( \n            <div className=\"chart\">\n                <div className=\"progress-chart-container\"> \n                    <Pie\n                        data={{\n                            labels: ['Set Completed', 'Set Remaining'],\n                            datasets:[\n                                {\n                                    data: [\n                                        this.props.todo,\n                                        this.props.completed\n                                    ],\n                                    backgroundColor: [\n                                        '#FDBF00',\n                                        '#FA4570',\n                                    ]\n                                }\n                            ]\n                          }}\n                        options={{\n                            legend:{\n                            display:false,\n                            position:'right'\n                            }\n                        }}\n\n                    />\n                </div>\n            </div>\n        )\n    }\n}",["37","38"],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":52,"column":14,"nodeType":"45","messageId":"46","endLine":52,"endColumn":15,"fix":"47"},{"ruleId":"48","severity":1,"message":"49","line":25,"column":8,"nodeType":"50","endLine":25,"endColumn":10,"suggestions":"51"},{"ruleId":"52","severity":1,"message":"53","line":142,"column":9,"nodeType":"54","messageId":"55","endLine":142,"endColumn":22},{"ruleId":"56","severity":1,"message":"57","line":5,"column":5,"nodeType":"58","messageId":"59","endLine":7,"endColumn":6},{"ruleId":"39","replacedBy":"60"},{"ruleId":"41","replacedBy":"61"},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"64","text":"65"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["66"],"no-unused-vars","'chartDatasets' is assigned a value but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["62"],["63"],"no-global-assign","no-unsafe-negation",[1512,1526],"\n            .",{"desc":"67","fix":"68"},"Update the dependencies array to be: [history]",{"range":"69","text":"70"},[1052,1054],"[history]"]